<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goku.coreui.sys.mapper.LessonKnowlgdgeMapper">
  <resultMap id="BaseResultMap" type="com.goku.coreui.sys.model.LessonKnowlgdge">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="ID" jdbcType="VARCHAR" property="id" />
    <result column="NO" jdbcType="INTEGER" property="no" />
    <result column="lessonID" jdbcType="VARCHAR" property="lessonid" />
    <result column="knowledge" jdbcType="VARCHAR" property="knowledge" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    ID, NO, lessonID, knowledge, createTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from lesson_knowledge
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from lesson_knowledge
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.goku.coreui.sys.model.LessonKnowlgdge">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into lesson_knowledge (ID, NO, lessonID, 
      knowledge, createTime)
    values (#{id,jdbcType=VARCHAR}, #{no,jdbcType=INTEGER}, #{lessonid,jdbcType=VARCHAR}, 
      #{knowledge,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.goku.coreui.sys.model.LessonKnowlgdge">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into lesson_knowledge
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="no != null">
        NO,
      </if>
      <if test="lessonid != null">
        lessonID,
      </if>
      <if test="knowledge != null">
        knowledge,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="no != null">
        #{no,jdbcType=INTEGER},
      </if>
      <if test="lessonid != null">
        #{lessonid,jdbcType=VARCHAR},
      </if>
      <if test="knowledge != null">
        #{knowledge,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.goku.coreui.sys.model.LessonKnowlgdge">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lesson_knowledge
    <set>
      <if test="no != null">
        NO = #{no,jdbcType=INTEGER},
      </if>
      <if test="lessonid != null">
        lessonID = #{lessonid,jdbcType=VARCHAR},
      </if>
      <if test="knowledge != null">
        knowledge = #{knowledge,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.goku.coreui.sys.model.LessonKnowlgdge">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lesson_knowledge
    set NO = #{no,jdbcType=INTEGER},
      lessonID = #{lessonid,jdbcType=VARCHAR},
      knowledge = #{knowledge,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <resultMap id="LessonQuestionMap" type="com.goku.coreui.sys.model.LessonQuestion">
		<id column="ID" jdbcType="VARCHAR" property="id" />
		<result column="knowledgeID" jdbcType="VARCHAR" property="knowledgeid" />
		<result column="answer" jdbcType="VARCHAR" property="answer" />
		<result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
		<result column="state" jdbcType="TINYINT" property="state" />
		<result column="studentCount" jdbcType="INTEGER" property="studentcount" />
		<result column="answerCount" jdbcType="INTEGER" property="answercount" />
		<result column="correctCount" jdbcType="INTEGER" property="correctcount" />
		<result column="accuracy" jdbcType="TINYINT" property="accuracy" />
	</resultMap>

	<resultMap id="LessonMemberMap" type="com.goku.coreui.sys.model.LessonMember">
		<id column="ID" jdbcType="VARCHAR" property="id" />
		<result column="lessonID" jdbcType="VARCHAR" property="lessonid" />
		<result column="userID" jdbcType="VARCHAR" property="userid" />
		<result column="isDel" jdbcType="TINYINT" property="isdel" />
		<result column="userName" jdbcType="VARCHAR" property="username" />
	</resultMap>

	<resultMap id="LessonQuestionStatisticsMap" type="com.goku.coreui.sys.model.LessonQuestionStatistics">
		<id column="ID" jdbcType="VARCHAR" property="id" />
		<result column="questionID" jdbcType="VARCHAR" property="questionid" />
		<result column="memberID" jdbcType="VARCHAR" property="memberid" />
		<result column="answer" jdbcType="VARCHAR" property="answer" />
		<result column="answerTime" jdbcType="TIMESTAMP" property="answertime" />
		<result column="correct" jdbcType="TINYINT" property="correct" />
	</resultMap>
  
  <select id="getKnowledge" parameterType="java.lang.String" resultType="com.goku.coreui.sys.model.KnowledgeStatistic">
		SELECT v3.knowledge AS knowledge, v3.questionCreateTime AS
		questionCreateTime,v3.studentCount AS studentCount, v3.answerCount AS
		answerCount,v3.correctCount AS correctCount,v3.accuracy AS accuracy
		FROM(select `v1`.`lessonID` AS `lessonID`,`v1`.`lessonName` AS
		`lessonName`,`t1`.`ID` AS `knowledgeID`,`t1`.`knowledge` AS
		`knowledge`,`t2`.`ID` AS `questionID`,`t2`.`answer` AS
		`correctAnswer`,`t2`.`state` AS `questionstate`,`t2`.`createTime` AS
		`questionCreateTime`,`v1`.`studentCount` AS
		`studentCount`,count(`t3`.`ID`) AS `answerCount`,`v2`.`correctCount`
		AS `correctCount`,(case when (count(`t3`.`ID`) = 0) then 0 else
		round(((`v2`.`correctCount` / count(`t3`.`ID`)) * 100),0) end) AS
		`accuracy` from (((((select `t1`.`ID` AS `lessonID`,`t1`.`name` AS
		`lessonName`,`t1`.`lessonNo` AS `lessonNo`,`t1`.`lessontime` AS
		`lessontime`,`t1`.`number` AS `number`,`t1`.`creatorID` AS
		`creatorID`,`t1`.`locked` AS `locked`,`t2`.`name` AS
		`teacher`,`t2`.`school` AS `school`,`t2`.`institute` AS
		`institute`,count(distinct `t3`.`ID`) AS `studentCount`,count(distinct
		`t4`.`ID`) AS `knowledgeCount` from (((`lesson` `t1` join `user` `t2`
		on((`t1`.`creatorID` = `t2`.`ID`))) left join `lesson_member` `t3`
		on(((`t3`.`lessonID` = `t1`.`ID`) and (`t3`.`isDel` = 0)))) left join
		`lesson_knowledge` `t4` on((`t4`.`lessonID` = `t1`.`ID`))) where
		(`t1`.`isDel` = 0) group by
		`t1`.`ID`,`t1`.`name`,`t1`.`lessonNo`,`t1`.`lessontime`,`t1`.`number`,`t1`.`creatorID`,`t1`.`locked`,`t2`.`name`,`t2`.`school`,`t2`.`institute`
		order by `t1`.`ID`) `v1` join `lesson_knowledge` `t1`
		on((`t1`.`lessonID` = `v1`.`lessonID`))) join `lesson_question` `t2`
		on((`t2`.`knowledgeID` = `t1`.`ID`))) left join
		`lesson_question_statistics` `t3` on((`t3`.`questionID` = `t2`.`ID`)))
		left join (select `t1`.`ID` AS `questionID`,count(`t2`.`questionID`)
		AS `correctCount` from (`lesson_question` `t1` left join
		`lesson_question_statistics` `t2` on(((`t2`.`questionID` = `t1`.`ID`)
		and (`t2`.`correct` = 1)))) group by `t1`.`ID` order by `t1`.`ID`)
		`v2` on((`v2`.`questionID` = `t2`.`ID`))) group by
		`v1`.`lessonID`,`v1`.`number`,`t1`.`ID`,`v1`.`lessonName`,`t1`.`knowledge`,`t2`.`ID`,`t2`.`answer`,`t2`.`createTime`,`t2`.`state`,`v2`.`correctCount`
		order by `v1`.`lessonID`,`t1`.`ID`,`t2`.`createTime` ) v3 WHERE
		v3.lessonID=#{lessonId,jdbcType=VARCHAR} ORDER BY v3.knowledge;
	</select>
	
	<!-- 分页 -->
	<select id="getKnowledgeForPage" resultType="com.goku.coreui.sys.model.KnowledgeStatistic">
		SELECT v3.knowledge AS knowledge, v3.questionCreateTime AS
		questionCreateTime,v3.studentCount AS studentCount, v3.answerCount AS
		answerCount,v3.correctCount AS correctCount,v3.accuracy AS accuracy
		FROM(select `v1`.`lessonID` AS `lessonID`,`v1`.`lessonName` AS
		`lessonName`,`t1`.`ID` AS `knowledgeID`,`t1`.`knowledge` AS
		`knowledge`,`t2`.`ID` AS `questionID`,`t2`.`answer` AS
		`correctAnswer`,`t2`.`state` AS `questionstate`,`t2`.`createTime` AS
		`questionCreateTime`,`v1`.`studentCount` AS
		`studentCount`,count(`t3`.`ID`) AS `answerCount`,`v2`.`correctCount`
		AS `correctCount`,(case when (count(`t3`.`ID`) = 0) then 0 else
		round(((`v2`.`correctCount` / count(`t3`.`ID`)) * 100),0) end) AS
		`accuracy` from (((((select `t1`.`ID` AS `lessonID`,`t1`.`name` AS
		`lessonName`,`t1`.`lessonNo` AS `lessonNo`,`t1`.`lessontime` AS
		`lessontime`,`t1`.`number` AS `number`,`t1`.`creatorID` AS
		`creatorID`,`t1`.`locked` AS `locked`,`t2`.`name` AS
		`teacher`,`t2`.`school` AS `school`,`t2`.`institute` AS
		`institute`,count(distinct `t3`.`ID`) AS `studentCount`,count(distinct
		`t4`.`ID`) AS `knowledgeCount` from (((`lesson` `t1` join `user` `t2`
		on((`t1`.`creatorID` = `t2`.`ID`))) left join `lesson_member` `t3`
		on(((`t3`.`lessonID` = `t1`.`ID`) and (`t3`.`isDel` = 0)))) left join
		`lesson_knowledge` `t4` on((`t4`.`lessonID` = `t1`.`ID`))) where
		(`t1`.`isDel` = 0) group by
		`t1`.`ID`,`t1`.`name`,`t1`.`lessonNo`,`t1`.`lessontime`,`t1`.`number`,`t1`.`creatorID`,`t1`.`locked`,`t2`.`name`,`t2`.`school`,`t2`.`institute`
		order by `t1`.`ID`) `v1` join `lesson_knowledge` `t1`
		on((`t1`.`lessonID` = `v1`.`lessonID`))) join `lesson_question` `t2`
		on((`t2`.`knowledgeID` = `t1`.`ID`))) left join
		`lesson_question_statistics` `t3` on((`t3`.`questionID` = `t2`.`ID`)))
		left join (select `t1`.`ID` AS `questionID`,count(`t2`.`questionID`)
		AS `correctCount` from (`lesson_question` `t1` left join
		`lesson_question_statistics` `t2` on(((`t2`.`questionID` = `t1`.`ID`)
		and (`t2`.`correct` = 1)))) group by `t1`.`ID` order by `t1`.`ID`)
		`v2` on((`v2`.`questionID` = `t2`.`ID`))) group by
		`v1`.`lessonID`,`v1`.`number`,`t1`.`ID`,`v1`.`lessonName`,`t1`.`knowledge`,`t2`.`ID`,`t2`.`answer`,`t2`.`createTime`,`t2`.`state`,`v2`.`correctCount`
		order by `v1`.`lessonID`,`t1`.`ID`,`t2`.`createTime` ) v3 WHERE
		v3.lessonID=#{arg0} ORDER BY v3.knowledge limit #{arg1},#{arg2};
	</select>
</mapper>