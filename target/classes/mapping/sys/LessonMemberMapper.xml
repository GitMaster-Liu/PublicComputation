<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goku.coreui.sys.mapper.LessonMemberMapper">
  <resultMap id="BaseResultMap" type="com.goku.coreui.sys.model.LessonMember">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="ID" jdbcType="VARCHAR" property="id" />
    <result column="lessonID" jdbcType="VARCHAR" property="lessonid" />
    <result column="userID" jdbcType="VARCHAR" property="userid" />
    <result column="isDel" jdbcType="TINYINT" property="isdel" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    ID, lessonID, userID, isDel
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from lesson_member
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from lesson_member
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.goku.coreui.sys.model.LessonMember">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into lesson_member (ID, lessonID, userID, 
      isDel)
    values (#{id,jdbcType=VARCHAR}, #{lessonid,jdbcType=VARCHAR}, #{userid,jdbcType=VARCHAR}, 
      #{isdel,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="com.goku.coreui.sys.model.LessonMember">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into lesson_member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="lessonid != null">
        lessonID,
      </if>
      <if test="userid != null">
        userID,
      </if>
      <if test="isdel != null">
        isDel,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="lessonid != null">
        #{lessonid,jdbcType=VARCHAR},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=VARCHAR},
      </if>
      <if test="isdel != null">
        #{isdel,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.goku.coreui.sys.model.LessonMember">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lesson_member
    <set>
      <if test="lessonid != null">
        lessonID = #{lessonid,jdbcType=VARCHAR},
      </if>
      <if test="userid != null">
        userID = #{userid,jdbcType=VARCHAR},
      </if>
      <if test="isdel != null">
        isDel = #{isdel,jdbcType=TINYINT},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.goku.coreui.sys.model.LessonMember">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update lesson_member
    set lessonID = #{lessonid,jdbcType=VARCHAR},
      userID = #{userid,jdbcType=VARCHAR},
      isDel = #{isdel,jdbcType=TINYINT}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
	<resultMap id="LessonMemberMap" type="com.goku.coreui.sys.model.LessonMember">
		<id column="ID" jdbcType="VARCHAR" property="id" />
		<result column="lessonID" jdbcType="VARCHAR" property="lessonid" />
		<result column="userID" jdbcType="VARCHAR" property="userid" />
		<result column="isDel" jdbcType="TINYINT" property="isdel" />
		<result column="userName" jdbcType="VARCHAR" property="username" />
	</resultMap>
	<resultMap id="UserMap" type="com.goku.coreui.sys.model.User">
		<id column="ID" jdbcType="VARCHAR" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="school" jdbcType="VARCHAR" property="school" />
		<result column="institute" jdbcType="VARCHAR" property="institute" />
		<result column="major" jdbcType="VARCHAR" property="major" />
		<result column="class" jdbcType="VARCHAR" property="className" />
		<result column="number" jdbcType="VARCHAR" property="number" />
		<result column="role" jdbcType="VARCHAR" property="role" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
	</resultMap>
	<resultMap id="LessonKnowlgdgeMap" type="com.goku.coreui.sys.model.LessonKnowlgdge">
		<id column="ID" jdbcType="VARCHAR" property="id" />
		<result column="NO" jdbcType="INTEGER" property="no" />
		<result column="lessonID" jdbcType="VARCHAR" property="lessonid" />
		<result column="knowledge" jdbcType="VARCHAR" property="knowledge" />
		<result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
	</resultMap>
	<resultMap id="LessonQuestionMap" type="com.goku.coreui.sys.model.LessonQuestion">
		<id column="ID" jdbcType="VARCHAR" property="id" />
		<result column="knowledgeID" jdbcType="VARCHAR" property="knowledgeid" />
		<result column="answer" jdbcType="VARCHAR" property="answer" />
		<result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
		<result column="state" jdbcType="TINYINT" property="state" />
		<result column="studentCount" jdbcType="INTEGER" property="studentcount" />
		<result column="answerCount" jdbcType="INTEGER" property="answercount" />
		<result column="correctCount" jdbcType="INTEGER" property="correctcount" />
		<result column="accuracy" jdbcType="TINYINT" property="accuracy" />
	</resultMap>
	<resultMap id="LessonQuestionStatisticsMap" type="com.goku.coreui.sys.model.LessonQuestionStatistics">
		<id column="ID" jdbcType="VARCHAR" property="id" />
		<result column="questionID" jdbcType="VARCHAR" property="questionid" />
		<result column="memberID" jdbcType="VARCHAR" property="memberid" />
		<result column="answer" jdbcType="VARCHAR" property="answer" />
		<result column="answerTime" jdbcType="TIMESTAMP" property="answertime" />
		<result column="correct" jdbcType="TINYINT" property="correct" />
	</resultMap>

	<select id="getMemberByLessonId" resultType="com.goku.coreui.sys.model.StudentAccuracyStatistic">
		SELECT lesson_member.ID AS memberID,
		lesson_member.isDel AS
		isDel,`user`.`name` AS
		studentName,`user`.school AS
		school,`user`.institute AS
		institute,`user`.major AS major,`user`.class
		AS className,`user`.number AS
		number,v1.questionCount AS
		questionCount,v2.correctCount AS
		correctCount,(case when
		(v1.questionCount = 0)then 0 else
		round(((v2.correctCount /
		v1.questionCount) * 100)) end) AS accuracy
		FROM (((((( lesson JOIN
		lesson_member
		ON((lesson_member.lessonID=lesson.ID)))JOIN `user`
		ON((lesson_member.userID=`user`.ID)))LEFT JOIN lesson_knowledge
		on((lesson_knowledge.lessonID =lesson.ID)))LEFT JOIN lesson_question
		on((lesson_question.knowledgeID=lesson_knowledge.ID)))JOIN(SELECT
		lesson.ID AS lessonID,COUNT(lesson_question.ID)AS questionCount FROM
		((lesson LEFT JOIN lesson_knowledge ON
		((lesson_knowledge.lessonID=lesson.ID)))LEFT JOIN lesson_question
		ON((lesson_question.knowledgeID=lesson_knowledge.ID)))WHERE
		lesson.ID=#{lessonId,jdbcType=VARCHAR} GROUP BY lesson.ID ORDER
		BY
		lesson.ID )v1 ON((v1.lessonID=lesson.ID))) JOIN (SELECT
		lesson_member.ID AS memberID,COUNT(lesson_question_statistics.ID)AS
		correctCount FROM((((lesson JOIN lesson_member
		on((lesson_member.lessonID=lesson.ID))) LEFT JOIN lesson_knowledge
		ON((lesson_knowledge.lessonID=lesson.ID)))LEFT JOIN lesson_question ON
		((lesson_question.knowledgeID=lesson_knowledge.ID)))LEFT JOIN
		lesson_question_statistics
		on(((lesson_question_statistics.questionID=lesson_question.ID)AND
		(lesson_question_statistics.memberID = lesson_member.ID)AND
		(lesson_question_statistics.correct=1))))WHERE
		lesson.ID=#{lessonId,jdbcType=VARCHAR} GROUP BY lesson_member.ID
		ORDER
		BY lesson_member.ID) v2 ON((v2.memberID=lesson_member.ID)))WHERE
		lesson.ID=#{lessonId,jdbcType=VARCHAR} GROUP BY
		lesson_member.ID,lesson_member.isDel,`user`.`name`,`user`.school,`user`.institute,`user`.major,`user`.class,`user`.number,v1.questionCount,v2.correctCount;
	</select>
	
	<select id="getMemberByLessonIdForPage" resultType="com.goku.coreui.sys.model.StudentAccuracyStatistic">
		SELECT lesson_member.ID AS memberID,
		lesson_member.isDel AS
		isDel,`user`.`name` AS
		studentName,`user`.school AS
		school,`user`.institute AS
		institute,`user`.major AS major,`user`.class
		AS className,`user`.number AS
		number,v1.questionCount AS
		questionCount,v2.correctCount AS
		correctCount,(case when
		(v1.questionCount = 0)then 0 else
		round(((v2.correctCount /
		v1.questionCount) * 100)) end) AS accuracy
		FROM (((((( lesson JOIN
		lesson_member
		ON((lesson_member.lessonID=lesson.ID)))JOIN `user`
		ON((lesson_member.userID=`user`.ID)))LEFT JOIN lesson_knowledge
		on((lesson_knowledge.lessonID =lesson.ID)))LEFT JOIN lesson_question
		on((lesson_question.knowledgeID=lesson_knowledge.ID)))JOIN(SELECT
		lesson.ID AS lessonID,COUNT(lesson_question.ID)AS questionCount FROM
		((lesson LEFT JOIN lesson_knowledge ON
		((lesson_knowledge.lessonID=lesson.ID)))LEFT JOIN lesson_question
		ON((lesson_question.knowledgeID=lesson_knowledge.ID)))WHERE
		lesson.ID=#{arg0} GROUP BY lesson.ID ORDER
		BY
		lesson.ID )v1 ON((v1.lessonID=lesson.ID))) JOIN (SELECT
		lesson_member.ID AS memberID,COUNT(lesson_question_statistics.ID)AS
		correctCount FROM((((lesson JOIN lesson_member
		on((lesson_member.lessonID=lesson.ID))) LEFT JOIN lesson_knowledge
		ON((lesson_knowledge.lessonID=lesson.ID)))LEFT JOIN lesson_question ON
		((lesson_question.knowledgeID=lesson_knowledge.ID)))LEFT JOIN
		lesson_question_statistics
		on(((lesson_question_statistics.questionID=lesson_question.ID)AND
		(lesson_question_statistics.memberID = lesson_member.ID)AND
		(lesson_question_statistics.correct=1))))WHERE
		lesson.ID=#{arg0} GROUP BY lesson_member.ID
		ORDER
		BY lesson_member.ID) v2 ON((v2.memberID=lesson_member.ID)))WHERE
		lesson.ID=#{arg0} GROUP BY
		lesson_member.ID,lesson_member.isDel,`user`.`name`,`user`.school,`user`.institute,`user`.major,`user`.class,`user`.number,v1.questionCount,v2.correctCount limit #{arg1},#{arg2} ;
	</select>

	<select id="getKnowledgeOfStudentByLessonId" parameterType="java.lang.String" resultType="com.goku.coreui.sys.model.StudentKnowledgeStatistic">
		SELECT v2.memberID AS memberID, `v1`.`knowledge` AS `knowledge`, `v1`.`createTime`
		AS `createTime`, `v1`.`questionCount` AS `questionCount`,
		count(`t4`.`ID`) AS `answerCount`, `v2`.`correctCount` AS
		`correctCount`, ( CASE WHEN (`v1`.`questionCount` = 0) THEN 0 ELSE
		round((( `v2`.`correctCount` / `v1`.`questionCount` ) * 100 )) END )
		AS `accuracy` FROM (((( `lesson_member` `t2` JOIN ( SELECT
		`t5`.`lessonID` AS `lessonID`, `t5`.`ID` AS `knowledgeID`,
		`t5`.`knowledge` AS `knowledge`, `t5`.`createTime` AS `createTime`,
		count(`t6`.`ID`) AS `questionCount` FROM ( `lesson_knowledge` `t5`
		LEFT JOIN `lesson_question` `t6` ON (( `t6`.`knowledgeID` = `t5`.`ID`
		))) WHERE `t5`.`lessonID` = #{arg0} GROUP
		BY `t5`.`ID` ) `v1` ON (( `v1`.`lessonID` = `t2`.`lessonID` ))) LEFT
		JOIN `lesson_question` `t3` ON (( `t3`.`knowledgeID` =
		`v1`.`knowledgeID` ))) LEFT JOIN `lesson_question_statistics` `t4` ON
		((( `t4`.`questionID` = `t3`.`ID` ) AND (`t4`.`memberID` =
		`t2`.`ID`)))) JOIN ( SELECT `t7`.`ID` AS `memberID`, `t8`.`ID` AS
		`knowledgeID`, count(`t10`.`ID`) AS `correctCount` FROM (((
		`lesson_member` `t7` JOIN `lesson_knowledge` `t8` ON ((
		`t8`.`lessonID` = `t7`.`lessonID` ))) LEFT JOIN `lesson_question` `t9`
		ON (( `t9`.`knowledgeID` = `t8`.`ID` ))) LEFT JOIN
		`lesson_question_statistics` `t10` ON ((( `t10`.`questionID` =
		`t9`.`ID` ) AND (`t10`.`memberID` = `t7`.`ID`) AND (`t10`.`correct` =
		1)))) WHERE `t7`.`ID` = #{arg1} GROUP BY
		`t7`.`ID`, `t8`.`ID` ) `v2` ON (((`v2`.`memberID` = `t2`.`ID`) AND (
		`v2`.`knowledgeID` = `v1`.`knowledgeID` )))) WHERE `t2`.`ID` =
		#{arg1} GROUP BY `v1`.`knowledge`,
		`v1`.`createTime`, `v1`.`questionCount`, `v2`.`correctCount` ORDER BY
		`v1`.`createTime`
	</select>
</mapper>